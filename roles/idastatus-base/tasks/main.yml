- name: set hostname
  hostname:
    name: "{{ system_hostname }}"
  become: true
  tags:
    base

- name: set system timezone to UTC
  timezone:
    name: UTC
  become: true
  tags:
    base

# allow password auth on AWS EC2 instances
- name: Get stats of a /etc/cloud/cloud.cfg.d dir to test for ec2 cloud env
  stat:
    path: /etc/cloud/cloud.cfg.d
  register: cloudstat

- name: Set pw auth to true in EC2 cloud.init environment
  shell: |
    echo "ssh_pwauth: true" > /etc/cloud/cloud.cfg.d/90_nrts.cfg
  become: true
  when: cloudstat.stat.isdir is defined and cloudstat.stat.isdir
  tags:
    base

# system specific tasks
- name: 
  include_tasks: "{{ ansible_facts['os_family']|lower }}_pkgs.yml"
  vars:
    is_ec2: cloudstat.stat.isdir is defined and cloudstat.stat.isdir
  tags:
    base

# NOTE: Cron not really used for base idastatus install
# Only if further configured for STATION or HUB use
- name: set cron service to running and enabled
  systemd:
    name: crond
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "RedHat"
  tags:
    base

- name: set cron service to running and enabled
  systemd:
    name: cron
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "Debian"
  tags:
    base
  
- name: chrony - redhat (not going to use ntpd)
  # ignore errors in case chrony not installed
  service:
    name: chronyd.service
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "RedHat"
  ignore_errors: True
  tags:
    base


- name: chrony - debian (not going to use ntpd)
  # ignore errors in case chrony not installed
  service:
    name: chrony.service
    state: started
    enabled: yes
  become: true
  when: ansible_facts['os_family'] == "Debian"
  ignore_errors: True
  tags:
    base

- name: make sure local subnets can query ntp deamon
  lineinfile:
    path: /etc/chrony.conf
    regexp: "^ *allow *127.0.0.1"
    insertafter: "^ *allow"
    line: 'allow 127.0.0.1'
    state: present
    backup: yes
  become: true
  tags:
    base

- name: Set PermitRootLogin to 'no'
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^ *PermitRootLogin .* *yes'
    replace: 'PermitRootLogin no'
    backup: yes
  become: true
  tags:
    base

- name: Set PasswordAuthentication to 'yes' (the default)
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^ *PasswordAuthentication +no'
    replace: '###ALLOW NRTS TUNNEL CONNECTION PasswordAuthentication no'
    backup: yes
  become: true
  tags:
    base

- name: Create LOCAL idadcc Group with (guid=4001)
  ansible.builtin.group:
    name: idadcc
    state: present
    gid: 4001
    local: yes
  become: yes
  tags:
    - usermods

####################################
# Generate password with python:
#   python3 -c "from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))"
####################################################################
#

- name: Create LOCAL user idadcc
  shell: |
    luseradd -u 4001 -d {{ idadcc_home_dir }} -s /usr/bin/bash -p '$6$xWfh9a/PgND3gSXa$a9x92wTS5R5lLWx49HCKxua9JRl9LSjsLTj1/Y2h7QDgMJ4KRXMR96pYKKf6U8C0YFM5ZLHLpzvHpWLNhKtYf0' idadcc
    mkdir {{ idadcc_home_dir }}/.ssh
    ssh-keygen -t rsa -b 2048 -N '' -f {{ idadcc_home_dir}}/.ssh/id_rsa
    chown -R idadcc:idadcc {{ idadcc_home_dir }}/.ssh
    chmod 700 {{ idadcc_home_dir }}/.ssh
    usermod -a -G docker idadcc
  become: yes
  tags:
    - usermods

# requires ida_dir
- name: Set mode on ida_dir
  file:
    name: "{{ ida_dir }}"
    state: directory
    mode: 02775
    owner: root
    group: idadcc
  become: yes
  tags:
    - usermods

- name: install custom idadcc sudoers conf file
  template:
    src: idadcc-sudoers.{{ ansible_facts['os_family']|lower }}.j2
    dest: /etc/sudoers.d/idadcc
    owner: root
    group: root
    mode: 0644
    backup: yes
  become: true

#- name: update perms on homedirs
#  file:
#    path: "{{ home_root }}/{{ item }}"
#    state: directory
#    owner: "{{ item }}"
#    group: "{{ item }}"
#    mode: "g+rx"
#  become: true
#  tags:
#    nrtsbuild
#  loop:
#    - nrts
#    - tunnel
#
## requires nrts_home_dir 
## MAY NEED TO CUSTOMIZE FOR DEBIAN
#- name: install custom NRTS rsyslog conf
#  template:
#    src: nrts-rsyslog.j2
#    dest: /etc/rsyslog.d/nrts.conf
#    owner: root
#    group: root
#    mode: 0644
#    backup: yes
#  become: true
#
## MAY NEED TO CUSTOMIZE FOR DEBIAN
#- name: make sure rsyslogd running and enabled with nrts custom conf
#  systemd:
#    name: rsyslog
#    state: restarted
#    enabled: yes
#  become: true

- name: install docker-compose manually
  shell: |
    mkdir -p {{ local_bin_dir }}
    wget -o {{ local_bin_dir }}/docker-compose https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)
    chmod +x {{ local_bin_dir }}/docker-compose
    systemctl start docker.service
  become: yes
  tags:
    - packages

- name: clone the docker-idastatus repo on the idastatus machine
  ansible.builtin.git:
      repo: https://github.com/ProjectIDA/docker-idastatus.git
      dest: "{{ ida_dir }}/docker-idastatus"
      accept_hostkey: true
  become: yes
  tags:
    - stationxmlsoftware

